/* Generated By:JavaCC: Do not edit this line. ParserIndicadores.java */
package dondeInvierto.dominio.parser;

import dondeInvierto.dominio.indicadores.*;
import excepciones.ParserError;

public class ParserIndicadores implements ParserIndicadoresConstants {
	public static Indicador parse(String strExpresion) {
		Indicador indicador = null;
		try {
			indicador = new ParserIndicadores(new java.io.StringReader(strExpresion)).Start();
			indicador.setEquivalencia(strExpresion);
		} catch (Throwable e) {
			throw new ParserError("Sintaxis incorrecta");
		}
		return indicador;
	}

	final public Indicador Start() throws ParseException {
		Token token;
		Indicador indicador;
		Expresion expresion;
		token = jj_consume_token(IND);
		indicador = new Indicador(token.image);
		jj_consume_token(9);
		expresion = Expresion();
		indicador.setExpresion(expresion);
		jj_consume_token(0);
		return indicador;
	}

	final public Expresion Expresion() throws ParseException {
		Expresion primerExpresion;
		Expresion segundaExpresion;
		Token tokOperacion;
		/* IntBinaryOperator */String operadorBinario;
		ExpresionBuilder expresionBuilder = new ExpresionBuilder();
		primerExpresion = T();
		expresionBuilder.agregarExpresion(primerExpresion);
		label_1: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case SUMAORESTA:
				;
				break;
			default:
				jj_la1[0] = jj_gen;
				break label_1;
			}
			tokOperacion = jj_consume_token(SUMAORESTA);
			operadorBinario = tokOperacion.image;
			// En realidad le tendría que pasar un lamda a IntBinaryOperator!!
			segundaExpresion = T();
			expresionBuilder.agregarOperacion(segundaExpresion, operadorBinario);
		}
		return expresionBuilder.build();
	}

	final public Expresion T() throws ParseException {
		Expresion primerExpresion;
		Expresion segundaExpresion;
		Token tokOperacion;
		/* IntBinaryOperator */String operadorBinario;
		ExpresionBuilder expresionBuilder = new ExpresionBuilder();
		primerExpresion = F();
		expresionBuilder.agregarExpresion(primerExpresion);
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case MULTODIV:
				;
				break;
			default:
				jj_la1[1] = jj_gen;
				break label_2;
			}
			tokOperacion = jj_consume_token(MULTODIV);
			operadorBinario = tokOperacion.image;
			// En realidad le tendría que pasar un lamda a IntBinaryOperator!!
			segundaExpresion = F();
			expresionBuilder.agregarOperacion(segundaExpresion, operadorBinario);
		}
		return expresionBuilder.build();
	}

	final public Expresion F() throws ParseException {
		Token tok;
		Expresion expresion;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case NUM:
			tok = jj_consume_token(NUM);
			return new ExpresionValor(Integer.parseInt(tok.image));
		case IND:
			tok = jj_consume_token(IND);
			return new ExpresionIndicador(tok.image);
		case CTA:
			tok = jj_consume_token(CTA);
			return new ExpresionCuenta(tok.image);
		case 5:
			jj_consume_token(5);
			expresion = Expresion();
			return expresion;
		default:
			jj_la1[2] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	/** Generated Token Manager. */
	public ParserIndicadoresTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[3];
	static private int[] jj_la1_0;

	static {
		jj_la1_init_0();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x80, 0x100, 0x1c20, };
	}

	/** Constructor with InputStream. */
	public ParserIndicadores(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public ParserIndicadores(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new ParserIndicadoresTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	/** Constructor. */
	public ParserIndicadores(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ParserIndicadoresTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	/** Constructor with generated Token Manager. */
	public ParserIndicadores(ParserIndicadoresTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(ParserIndicadoresTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 3; i++)
			jj_la1[i] = -1;
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[13];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 3; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 13; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

}
